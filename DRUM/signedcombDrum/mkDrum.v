//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Dec  5 23:03:55 GMT 2017
//
//
// Ports:
// Name                         I/O  size props
// multiply                       O    72
// RDY_multiply                   O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// multiply_m1                    I    32
// multiply_m2                    I    40
// multiply_k                     I     6
//
// Combinational paths from inputs to outputs:
//   (multiply_m1, multiply_m2, multiply_k) -> multiply
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDrum(CLK,
	      RST_N,

	      multiply_m1,
	      multiply_m2,
	      multiply_k,
	      multiply,
	      RDY_multiply);
  input  CLK;
  input  RST_N;

  // value method multiply
  input  [31 : 0] multiply_m1;
  input  [39 : 0] multiply_m2;
  input  [5 : 0] multiply_k;
  output [71 : 0] multiply;
  output RDY_multiply;

  // signals for module outputs
  wire [71 : 0] multiply;
  wire RDY_multiply;

  // remaining internal signals
  wire [71 : 0] _0_CONCAT_IF_multiply_m1_BIT_31_THEN_INV_multip_ETC___d174,
		x__h106;
  wire [63 : 0] IF_multiply_m1_BIT_31_THEN_INV_multiply_m1_PLU_ETC___d167;
  wire [39 : 0] _theResult_____5__h30,
		theResult_____50_AND_INV_0xFFFFFFFFFE_SL_theRe_ETC__q1;
  wire [31 : 0] _theResult_____6__h29, x__h119, x__h2813;
  wire [5 : 0] _theResult_____1__h34,
	       _theResult_____2__h33,
	       _theResult_____3__h32,
	       _theResult_____4__h31,
	       i2__h124,
	       i2__h2816,
	       pos2__h6138,
	       x__h2807,
	       x__h6155,
	       x__h6183,
	       x__h6185,
	       y__h107,
	       y__h6222;

  // value method multiply
  assign multiply =
	     (multiply_m1[31] == multiply_m2[39]) ?
	       _0_CONCAT_IF_multiply_m1_BIT_31_THEN_INV_multip_ETC___d174 :
	       ~_0_CONCAT_IF_multiply_m1_BIT_31_THEN_INV_multip_ETC___d174 +
	       72'd1 ;
  assign RDY_multiply = 1'd1 ;

  // remaining internal signals
  assign IF_multiply_m1_BIT_31_THEN_INV_multiply_m1_PLU_ETC___d167 =
	     x__h119 * x__h2813 ;
  assign _0_CONCAT_IF_multiply_m1_BIT_31_THEN_INV_multip_ETC___d174 =
	     x__h106 << y__h107 ;
  assign _theResult_____1__h34 =
	     (_theResult_____3__h32 < multiply_k) ?
	       pos2__h6138 :
	       _theResult_____3__h32 ;
  assign _theResult_____2__h33 =
	     (_theResult_____4__h31 < multiply_k) ?
	       pos2__h6138 :
	       _theResult_____4__h31 ;
  assign _theResult_____3__h32 =
	     _theResult_____5__h30[39] ?
	       6'd39 :
	       (_theResult_____5__h30[38] ?
		  6'd38 :
		  (_theResult_____5__h30[37] ?
		     6'd37 :
		     (_theResult_____5__h30[36] ?
			6'd36 :
			(_theResult_____5__h30[35] ?
			   6'd35 :
			   (_theResult_____5__h30[34] ?
			      6'd34 :
			      (_theResult_____5__h30[33] ?
				 6'd33 :
				 (_theResult_____5__h30[32] ?
				    6'd32 :
				    (_theResult_____5__h30[31] ?
				       6'd31 :
				       (_theResult_____5__h30[30] ?
					  6'd30 :
					  (_theResult_____5__h30[29] ?
					     6'd29 :
					     (_theResult_____5__h30[28] ?
						6'd28 :
						(_theResult_____5__h30[27] ?
						   6'd27 :
						   (_theResult_____5__h30[26] ?
						      6'd26 :
						      (_theResult_____5__h30[25] ?
							 6'd25 :
							 (_theResult_____5__h30[24] ?
							    6'd24 :
							    (_theResult_____5__h30[23] ?
							       6'd23 :
							       (_theResult_____5__h30[22] ?
								  6'd22 :
								  (_theResult_____5__h30[21] ?
								     6'd21 :
								     (_theResult_____5__h30[20] ?
									6'd20 :
									(_theResult_____5__h30[19] ?
									   6'd19 :
									   (_theResult_____5__h30[18] ?
									      6'd18 :
									      (_theResult_____5__h30[17] ?
										 6'd17 :
										 (_theResult_____5__h30[16] ?
										    6'd16 :
										    (_theResult_____5__h30[15] ?
										       6'd15 :
										       (_theResult_____5__h30[14] ?
											  6'd14 :
											  (_theResult_____5__h30[13] ?
											     6'd13 :
											     (_theResult_____5__h30[12] ?
												6'd12 :
												(_theResult_____5__h30[11] ?
												   6'd11 :
												   (_theResult_____5__h30[10] ?
												      6'd10 :
												      (_theResult_____5__h30[9] ?
													 6'd9 :
													 (_theResult_____5__h30[8] ?
													    6'd8 :
													    (_theResult_____5__h30[7] ?
													       6'd7 :
													       (_theResult_____5__h30[6] ?
														  6'd6 :
														  (_theResult_____5__h30[5] ?
														     6'd5 :
														     (_theResult_____5__h30[4] ?
															6'd4 :
															(_theResult_____5__h30[3] ?
															   6'd3 :
															   (_theResult_____5__h30[2] ?
															      6'd2 :
															      (_theResult_____5__h30[1] ?
																 6'd1 :
																 (_theResult_____5__h30[0] ?
																    6'd0 :
																    pos2__h6138))))))))))))))))))))))))))))))))))))))) ;
  assign _theResult_____4__h31 =
	     _theResult_____6__h29[31] ?
	       6'd31 :
	       (_theResult_____6__h29[30] ?
		  6'd30 :
		  (_theResult_____6__h29[29] ?
		     6'd29 :
		     (_theResult_____6__h29[28] ?
			6'd28 :
			(_theResult_____6__h29[27] ?
			   6'd27 :
			   (_theResult_____6__h29[26] ?
			      6'd26 :
			      (_theResult_____6__h29[25] ?
				 6'd25 :
				 (_theResult_____6__h29[24] ?
				    6'd24 :
				    (_theResult_____6__h29[23] ?
				       6'd23 :
				       (_theResult_____6__h29[22] ?
					  6'd22 :
					  (_theResult_____6__h29[21] ?
					     6'd21 :
					     (_theResult_____6__h29[20] ?
						6'd20 :
						(_theResult_____6__h29[19] ?
						   6'd19 :
						   (_theResult_____6__h29[18] ?
						      6'd18 :
						      (_theResult_____6__h29[17] ?
							 6'd17 :
							 (_theResult_____6__h29[16] ?
							    6'd16 :
							    (_theResult_____6__h29[15] ?
							       6'd15 :
							       (_theResult_____6__h29[14] ?
								  6'd14 :
								  (_theResult_____6__h29[13] ?
								     6'd13 :
								     (_theResult_____6__h29[12] ?
									6'd12 :
									(_theResult_____6__h29[11] ?
									   6'd11 :
									   (_theResult_____6__h29[10] ?
									      6'd10 :
									      (_theResult_____6__h29[9] ?
										 6'd9 :
										 (_theResult_____6__h29[8] ?
										    6'd8 :
										    (_theResult_____6__h29[7] ?
										       6'd7 :
										       (_theResult_____6__h29[6] ?
											  6'd6 :
											  (_theResult_____6__h29[5] ?
											     6'd5 :
											     (_theResult_____6__h29[4] ?
												6'd4 :
												(_theResult_____6__h29[3] ?
												   6'd3 :
												   (_theResult_____6__h29[2] ?
												      6'd2 :
												      (_theResult_____6__h29[1] ?
													 6'd1 :
													 (_theResult_____6__h29[0] ?
													    6'd0 :
													    pos2__h6138))))))))))))))))))))))))))))))) ;
  assign _theResult_____5__h30 =
	     multiply_m2[39] ? ~multiply_m2 + 40'd1 : multiply_m2 ;
  assign _theResult_____6__h29 =
	     multiply_m1[31] ? ~multiply_m1 + 32'd1 : multiply_m1 ;
  assign i2__h124 = x__h2807 + 6'd1 ;
  assign i2__h2816 = x__h6155 + 6'd1 ;
  assign pos2__h6138 = multiply_k - 6'd1 ;
  assign theResult_____50_AND_INV_0xFFFFFFFFFE_SL_theRe_ETC__q1 =
	     (_theResult_____5__h30 &
	      ~(40'hFFFFFFFFFE << _theResult_____1__h34)) >>
	     i2__h2816 ;
  assign x__h106 =
	     { 8'd0,
	       IF_multiply_m1_BIT_31_THEN_INV_multiply_m1_PLU_ETC___d167 } ;
  assign x__h119 =
	     (_theResult_____6__h29 &
	      ~(32'hFFFFFFFE << _theResult_____2__h33[4:0])) >>
	     i2__h124[4:0] ;
  assign x__h2807 = _theResult_____2__h33 - multiply_k ;
  assign x__h2813 =
	     theResult_____50_AND_INV_0xFFFFFFFFFE_SL_theRe_ETC__q1[31:0] ;
  assign x__h6155 = _theResult_____1__h34 - multiply_k ;
  assign x__h6183 = x__h6185 - y__h6222 ;
  assign x__h6185 = _theResult_____2__h33 + _theResult_____1__h34 ;
  assign y__h107 = x__h6183 + 6'd2 ;
  assign y__h6222 = { multiply_k[4:0], 1'd0 } ;
endmodule  // mkDrum

