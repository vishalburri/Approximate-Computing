//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Sun Dec  3 16:38:03 GMT 2017
//
//
// Ports:
// Name                         I/O  size props
// multiply                       O    64
// RDY_multiply                   O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// multiply_m1                    I    32
// multiply_m2                    I    32
//
// Combinational paths from inputs to outputs:
//   (multiply_m1, multiply_m2) -> multiply
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDrum(CLK,
	      RST_N,

	      multiply_m1,
	      multiply_m2,
	      multiply,
	      RDY_multiply);
  input  CLK;
  input  RST_N;

  // value method multiply
  input  [31 : 0] multiply_m1;
  input  [31 : 0] multiply_m2;
  output [63 : 0] multiply;
  output RDY_multiply;

  // signals for module outputs
  wire [63 : 0] multiply;
  wire RDY_multiply;

  // remaining internal signals
  wire [43 : 0] IF_IF_multiply_m1_BIT_31_THEN_INV_multiply_m1__ETC___d23,
		out___1__h129,
		out__h31,
		x__h42;
  wire [31 : 0] a1___1__h194, b1___1__h242, x__h168, x__h216;
  wire [21 : 0] x__h268, x__h287;

  // value method multiply
  assign multiply = { x__h42, 20'd0 } ;
  assign RDY_multiply = 1'd1 ;

  // remaining internal signals
  assign IF_IF_multiply_m1_BIT_31_THEN_INV_multiply_m1__ETC___d23 =
	     x__h268 * x__h287 ;
  assign a1___1__h194 = ~multiply_m1 + 32'd1 ;
  assign b1___1__h242 = ~multiply_m2 + 32'd1 ;
  assign out___1__h129 = ~out__h31 + 44'd1 ;
  assign out__h31 =
	     (x__h168[31] && !x__h216[31] || x__h216[31] && !x__h168[31]) ?
	       -IF_IF_multiply_m1_BIT_31_THEN_INV_multiply_m1__ETC___d23 :
	       IF_IF_multiply_m1_BIT_31_THEN_INV_multiply_m1__ETC___d23 ;
  assign x__h168 = multiply_m1[31] ? a1___1__h194 : multiply_m1 ;
  assign x__h216 = multiply_m2[31] ? b1___1__h242 : multiply_m2 ;
  assign x__h268 = x__h168[31] ? -x__h168[31:10] : x__h168[31:10] ;
  assign x__h287 = x__h216[31] ? -x__h216[31:10] : x__h216[31:10] ;
  assign x__h42 =
	     (multiply_m1[31] == multiply_m2[31]) ? out__h31 : out___1__h129 ;
endmodule  // mkDrum

