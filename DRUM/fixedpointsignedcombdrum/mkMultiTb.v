//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Sun Dec  3 16:38:04 GMT 2017
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMultiTb(CLK,
		 RST_N);
  input  CLK;
  input  RST_N;

  // register c
  reg [31 : 0] c;
  wire [31 : 0] c$D_IN;
  wire c$EN;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register lfsr1_r
  reg [31 : 0] lfsr1_r;
  wire [31 : 0] lfsr1_r$D_IN;
  wire lfsr1_r$EN;

  // register lfsr2_r
  reg [31 : 0] lfsr2_r;
  wire [31 : 0] lfsr2_r$D_IN;
  wire lfsr2_r$EN;

  // register starting
  reg starting;
  wire starting$D_IN, starting$EN;

  // ports of submodule dut
  wire [63 : 0] dut$multiply;
  wire [31 : 0] dut$multiply_m1, dut$multiply_m2;

  // remaining internal signals
  wire c_SLT_65536___d3;

  // submodule dut
  mkDrum dut(.CLK(CLK),
	     .RST_N(RST_N),
	     .multiply_m1(dut$multiply_m1),
	     .multiply_m2(dut$multiply_m2),
	     .multiply(dut$multiply),
	     .RDY_multiply());

  // register c
  assign c$D_IN = c + 32'd65536 ;
  assign c$EN = c_SLT_65536___d3 && !starting ;

  // register cnt
  assign cnt$D_IN = 32'h0 ;
  assign cnt$EN = 1'b0 ;

  // register lfsr1_r
  assign lfsr1_r$D_IN = 32'h0 ;
  assign lfsr1_r$EN = 1'b0 ;

  // register lfsr2_r
  assign lfsr2_r$D_IN = 32'h0 ;
  assign lfsr2_r$EN = 1'b0 ;

  // register starting
  assign starting$D_IN = 1'd0 ;
  assign starting$EN = starting ;

  // submodule dut
  assign dut$multiply_m1 = 32'hFFFCDBC1 ;
  assign dut$multiply_m2 = 32'd205887 ;

  // remaining internal signals
  assign c_SLT_65536___d3 = (c ^ 32'h80000000) < 32'h80010000 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	lfsr1_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	lfsr2_r <= `BSV_ASSIGNMENT_DELAY 32'd1;
	starting <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (c$EN) c <= `BSV_ASSIGNMENT_DELAY c$D_IN;
	if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (lfsr1_r$EN) lfsr1_r <= `BSV_ASSIGNMENT_DELAY lfsr1_r$D_IN;
	if (lfsr2_r$EN) lfsr2_r <= `BSV_ASSIGNMENT_DELAY lfsr2_r$D_IN;
	if (starting$EN) starting <= `BSV_ASSIGNMENT_DELAY starting$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c = 32'hAAAAAAAA;
    cnt = 32'hAAAAAAAA;
    lfsr1_r = 32'hAAAAAAAA;
    lfsr2_r = 32'hAAAAAAAA;
    starting = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (c_SLT_65536___d3 && !starting)
	$display("Actual: %b \nExpect :%b\ninteger: %b\nfraction:%b\n",
		 dut$multiply,
		 64'hFFFFFFF62164387F,
		 $signed(dut$multiply[63:32]),
		 $unsigned(dut$multiply[31:0]));
    if (RST_N != `BSV_RESET_VALUE) if (!c_SLT_65536___d3) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkMultiTb

