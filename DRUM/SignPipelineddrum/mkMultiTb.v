//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Wed Dec  6 15:27:17 GMT 2017
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMultiTb(CLK,
		 RST_N);
  input  CLK;
  input  RST_N;

  // register c
  reg [31 : 0] c;
  wire [31 : 0] c$D_IN;
  wire c$EN;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register cycle
  reg [31 : 0] cycle;
  wire [31 : 0] cycle$D_IN;
  wire cycle$EN;

  // register d
  reg [31 : 0] d;
  wire [31 : 0] d$D_IN;
  wire d$EN;

  // register fh
  reg [31 : 0] fh;
  wire [31 : 0] fh$D_IN;
  wire fh$EN;

  // ports of submodule dut
  wire [71 : 0] dut$result;
  wire [39 : 0] dut$multiply_m2;
  wire [31 : 0] dut$multiply_m1;
  wire [5 : 0] dut$multiply_k;
  wire dut$EN_multiply, dut$EN_result, dut$RDY_result;

  // submodule dut
  mkMulti dut(.CLK(CLK),
	      .RST_N(RST_N),
	      .multiply_k(dut$multiply_k),
	      .multiply_m1(dut$multiply_m1),
	      .multiply_m2(dut$multiply_m2),
	      .EN_multiply(dut$EN_multiply),
	      .EN_result(dut$EN_result),
	      .RDY_multiply(),
	      .result(dut$result),
	      .RDY_result(dut$RDY_result));

  // register c
  assign c$D_IN = c + 32'd1 ;
  assign c$EN = c < 32'd10 ;

  // register cnt
  assign cnt$D_IN = 32'h0 ;
  assign cnt$EN = 1'b0 ;

  // register cycle
  assign cycle$D_IN = cycle + 32'd1 ;
  assign cycle$EN = 1'd1 ;

  // register d
  assign d$D_IN = d + 32'd1 ;
  assign d$EN = dut$RDY_result ;

  // register fh
  assign fh$D_IN = 32'h0 ;
  assign fh$EN = 1'b0 ;

  // submodule dut
  assign dut$multiply_k = 6'd6 ;
  assign dut$multiply_m1 = 32'd4096 ;
  assign dut$multiply_m2 = 40'h0200000000 ;
  assign dut$EN_multiply = c < 32'd10 ;
  assign dut$EN_result = dut$RDY_result ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cnt <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	d <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fh <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (c$EN) c <= `BSV_ASSIGNMENT_DELAY c$D_IN;
	if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (cycle$EN) cycle <= `BSV_ASSIGNMENT_DELAY cycle$D_IN;
	if (d$EN) d <= `BSV_ASSIGNMENT_DELAY d$D_IN;
	if (fh$EN) fh <= `BSV_ASSIGNMENT_DELAY fh$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c = 32'hAAAAAAAA;
    cnt = 32'hAAAAAAAA;
    cycle = 32'hAAAAAAAA;
    d = 32'hAAAAAAAA;
    fh = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (c < 32'd10) $display("expected: x = %b", 32'd8192);
    if (RST_N != `BSV_RESET_VALUE) if (d >= 32'd10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (dut$RDY_result)
	$display("Result = %b %b", dut$result, dut$result[63:32]);
  end
  // synopsys translate_on
endmodule  // mkMultiTb

