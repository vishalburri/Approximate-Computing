//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sat Oct 21 00:12:39 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_load                       O     1 const
// read                           O    64 reg
// RDY_read                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// load_aa                        I    32 reg
// load_bb                        I    32 reg
// EN_load                        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module multiplier(CLK,
		  RST_N,

		  load_aa,
		  load_bb,
		  EN_load,
		  RDY_load,

		  read,
		  RDY_read);
  input  CLK;
  input  RST_N;

  // action method load
  input  [31 : 0] load_aa;
  input  [31 : 0] load_bb;
  input  EN_load;
  output RDY_load;

  // value method read
  output [63 : 0] read;
  output RDY_read;

  // signals for module outputs
  wire [63 : 0] read;
  wire RDY_load, RDY_read;

  // register a
  reg [31 : 0] a;
  wire [31 : 0] a$D_IN;
  wire a$EN;

  // register b
  reg [31 : 0] b;
  wire [31 : 0] b$D_IN;
  wire b$EN;

  // register res
  reg [63 : 0] res;
  wire [63 : 0] res$D_IN;
  wire res$EN;

  // remaining internal signals
  wire [63 : 0] IF_a_BIT_31_THEN_NEG_a_0_ELSE_a_1_MUL_IF_b_BIT_ETC___d14;
  wire [31 : 0] x__h180, x__h200;

  // action method load
  assign RDY_load = 1'd1 ;

  // value method read
  assign read = res ;
  assign RDY_read = 1'd1 ;

  // register a
  assign a$D_IN = load_aa ;
  assign a$EN = EN_load ;

  // register b
  assign b$D_IN = load_bb ;
  assign b$EN = EN_load ;

  // register res
  assign res$D_IN =
	     (a[31] && !b[31] || b[31] && !a[31]) ?
	       -IF_a_BIT_31_THEN_NEG_a_0_ELSE_a_1_MUL_IF_b_BIT_ETC___d14 :
	       IF_a_BIT_31_THEN_NEG_a_0_ELSE_a_1_MUL_IF_b_BIT_ETC___d14 ;
  assign res$EN = 1'd1 ;

  // remaining internal signals
  assign IF_a_BIT_31_THEN_NEG_a_0_ELSE_a_1_MUL_IF_b_BIT_ETC___d14 =
	     x__h180 * x__h200 ;
  assign x__h180 = a[31] ? -a : a ;
  assign x__h200 = b[31] ? -b : b ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	res <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (a$EN) a <= `BSV_ASSIGNMENT_DELAY a$D_IN;
	if (b$EN) b <= `BSV_ASSIGNMENT_DELAY b$D_IN;
	if (res$EN) res <= `BSV_ASSIGNMENT_DELAY res$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 32'hAAAAAAAA;
    b = 32'hAAAAAAAA;
    res = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // multiplier

